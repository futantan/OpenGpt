// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// // Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
//     @@index([userId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@index([userId])
// }

// model User {
//     id            String       @id @default(cuid())
//     name          String?
//     email         String?      @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     OpenGptAdd    OpenGptAdd[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

// the models above are from the T3 stack template

model OpenGptApp {
    id           String  @id @default(cuid())
    name         String  @unique
    description  String
    icon         String // for example emoji
    hint         String?
    demoInput    String  @db.VarChar(1000)
    prompt       String  @db.VarChar(10000)
    usedCount    BigInt  @default(1)
    paidUseCount BigInt  @default(1)
    shouldHide   Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // user      User?    @relation(fields: [userId], references: [id])
    // userId    String?

    // @@index([userId])
}
